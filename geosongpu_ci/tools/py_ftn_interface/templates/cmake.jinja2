# [ADAPT] comments points to line that needs to be adapted in your CMakeLists.txt
# [COPY] is code that should be directly copied over


#
## [ADAPT] Sources.
#

set( interface_sources
    {{interface_directory}}/{{prefix}}_interface.f90
    {{interface_directory}}/{{prefix}}_interface.c
)

# [ADAPT] : use this to append the interface source to your program
# list( APPEND sources ${interface_sources} )


#
## [COPY] {{prefix}} Interface.
#

message(STATUS "Building {{prefix}} interface")

add_definitions(-DRUN_{{prefix}})

find_package(MPI REQUIRED)
if (MPI_FOUND)
    include_directories(SYSTEM ${MPI_INCLUDE_PATH})
else (MPI_FOUND)
    message(SEND_ERROR "This application cannot compile without MPI")
endif (MPI_FOUND)

find_package(Python COMPONENTS Interpreter REQUIRED)

# Set up some variables in case names change
set({{prefix}}_INTERFACE_LIBRARY     ${CMAKE_CURRENT_BINARY_DIR}/lib{{prefix}}_interface.so)
set({{prefix}}_INTERFACE_HEADER_FILE ${CMAKE_CURRENT_BINARY_DIR}/{{prefix}}_interface.h)
set({{prefix}}_INTERFACE_DIRECTORY   {{interface_directory}})
set({{prefix}}_INTERFACE_SRCS        ${{"{"}}{{prefix}}_INTERFACE_DIRECTORY}/{{prefix}}_interface.py)

message(VERBOSE "Python is: ${Python3_EXECUTABLE}")

# This command creates the shared object library from Python
add_custom_command(
    OUTPUT ${{"{"}}{{prefix}}_INTERFACE_LIBRARY}
    COMMAND ${Python3_EXECUTABLE} ${{"{"}}{{prefix}}_INTERFACE_SRCS}
    BYPRODUCTS ${{"{"}}{{prefix}}_INTERFACE_HEADER_FILE}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    MAIN_DEPENDENCY ${{"{"}}{{prefix}}_INTERFACE_SRCS}
    COMMENT "Building gtfv3 interface library with Python"
    VERBATIM
)

# This creates a target we can use for dependencies and post build
add_custom_target(generate_python_interface_library DEPENDS ${{"{"}}{{prefix}}_INTERFACE_LIBRARY})

# Because of the weird hacking of INTERFACE libraries below, we cannot
# use the "usual" CMake calls to install() the .so. I think it's because
# INTERFACE libraries don't actually produce any artifacts as far as
# CMake is concerned. So we add a POST_BUILD custom command to "install"
# the library into install/lib
add_custom_command(
    TARGET generate_python_interface_library
    POST_BUILD
    # We first need to make a lib dir if it doesn't exist. If not, then
    # the next command can copy the script into a *file* called lib because
    # of a race condition (if install/lib/ isn't mkdir'd first)
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_INSTALL_PREFIX}/lib
    # Now we copy the file (if different...though not sure if this is useful)
    COMMAND ${CMAKE_COMMAND} -E copy_if_different "${{"{"}}{{prefix}}_INTERFACE_LIBRARY}" ${CMAKE_INSTALL_PREFIX}/lib
)

# We use INTERFACE libraries to create a sort of "fake" target library we can use
# to make libFVdycoreCubed_GridComp.a depend on. It seems to work!
add_library({{prefix}}_interface_py INTERFACE)

# The target_include_directories bits were essentially stolen from the esma_add_library
# code...
target_include_directories(
    {{prefix}}_interface_py INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}> # stubs
    # modules and copied *.h, *.inc
    $<BUILD_INTERFACE:${esma_include}/${this}>
    $<INSTALL_INTERFACE:include/${this}>
)
target_link_libraries({{prefix}}_interface_py INTERFACE ${{"{"}}{{prefix}}_INTERFACE_LIBRARY})

# This makes sure the library is built first
add_dependencies({{prefix}}_interface_py generate_python_interface_library)

# This bit is to resolve an issue and Google told me to do this. I'm not
# sure that the LIBRARY DESTINATION bit actually does anything since
# this is using INTERFACE
install(
    TARGETS {{prefix}}_interface_py
    EXPORT ${PROJECT_NAME}-targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
)

#
## [ADAPT] Executable.
#

# [ADAPT] Add dependencies to the generated interface .so and related libraries
#add_dependencies(test {{prefix}}_interface_py)
#target_link_libraries(test {{prefix}}_interface_py)
#target_link_libraries(test ${MPI_C_LIBRARIES})
