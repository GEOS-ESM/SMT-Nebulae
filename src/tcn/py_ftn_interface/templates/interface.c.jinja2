#include "{{prefix}}_interface_library.h"
#include "mpi.h"
#include <stdio.h>
#include <time.h>

{% for function in functions -%}

  void {{prefix}}_c_{{function.name}}(
      // inputs
      {% for input in function.inputs -%}
        {%- if "*" in input.type -%}
        {{input.type}} {{input.name}},
        int * {{input.name}}_dim_sizes,
        int {{input.name}}_rank{{ ", " if not loop.last or function.inouts|length > 0 or function.outputs|length > 0 else "" }}
        {%- else -%}
        {{input.type}} {{input.name}}{{ ", " if not loop.last or function.inouts|length > 0 or function.outputs|length > 0 else "" }}
        {%- endif -%}
      {%- endfor %}
      // inputs-outputs
      {% for inout in function.inouts -%}
        {%- if "*" in inout.type -%}
        {{inout.type}} {{inout.name}},
        int * {{inout.name}}_dim_sizes,
        int {{inout.name}}_rank{{ ", " if not loop.last or function.outputs|length > 0 else "" }}
        {%- else -%}
        {{inout.type}} {{inout.name}}{{ ", " if not loop.last or function.outputs|length > 0 else "" }}
        {%- endif -%}
      {%- endfor %}
      // outputs
      {% for output in function.outputs -%}
        {{output.type}} {{output.name}}{{ ", " if not loop.last else "" }}
      {%- endfor %}
  ) {
    {%- for init_code in function.arguments_init -%}
        {{init_code}}
    {%- endfor -%}
    {{prefix}}_py_{{function.name}}(
      {% for input in function.inputs -%}
        {% if "MPI" not in input.type -%}
          {%- if "*" in input.type -%}
           {{input.name}},
          {{input.name}}_dim_sizes, {{input.name}}_rank{{ ", " if not loop.last or function.inouts|length > 0 or function.outputs|length > 0 else "" }}
          {%- else -%}
          {{input.name}}{{ ", " if not loop.last or function.inouts|length > 0 or function.outputs|length > 0 else "" }}
          {%- endif -%}
        {%- else -%}
          {{input.name}}_c{{ ", " if not loop.last or function.inouts|length > 0 or function.outputs|length > 0 else "" }}
        {%- endif %}
      {% endfor %}
      {%- for inout in function.inouts -%}
        {% if "MPI" not in inout.type -%}
          {%- if "*" in inout.type -%}
          {{inout.name}},
          {{inout.name}}_dim_sizes, {{inout.name}}_rank{{ ", " if not loop.last or function.outputs|length > 0 else "" }}
          {%- else -%}
          {{inout.name}}{{ ", " if not loop.last or function.outputs|length > 0 else "" }}
          {%- endif -%}
        {%- else -%}
          {{inout.name}}_c{{ ", " if not loop.last or function.outputs|length > 0 else "" }}
        {%- endif %}
      {% endfor -%}
      {%- for output in function.outputs -%}
        {% if "MPI" not in output.type -%}
          {{output.name}}{{ ", " if not loop.last else "" }}
        {%- else -%}
          {{output.name}}_c{{ ", " if not loop.last else "" }}
        {%- endif %}
      {% endfor %}

    );

    //if (return_code < 0)
    //{
    //    exit(return_code);
    //}
  }

{% endfor %}

{% for validation in validations -%}

  void v_{{prefix}}_c_{{validation.candidate}}(
      // inputs-outputs
      {% for inout in validation.inouts -%}
        {{inout.type}} f90_{{inout.name}}, {{inout.type}} py_{{inout.name}}, int {{inout.name}}_dims,
        {%- for n in range(inout.dims) -%}
          int {{inout.name}}_shape_{{n}}{{ ", " if not loop.last or validation.outputs|length > 0 else "" }}
        {%- endfor -%}
      {%- endfor %}
      // outputs
      {% for output in validation.outputs -%}
        {{output.type}} f90_{{output.name}}, {{output.type}} py_{{output.name}}, int {{output.name}}_dims,
        {%- for n in range(output.dims) -%}
          int {{output.name}}_shape_{{n}}{{ ", " if not loop.last else "" }}
        {%- endfor -%}
      {%- endfor %}
  ) {
    {% for inout in validation.inouts -%}
    FloatArray {{inout.name}}_wrapped;
    {{inout.name}}_wrapped.fortran = f90_{{inout.name}};
    {{inout.name}}_wrapped.python = py_{{inout.name}};
    {{inout.name}}_wrapped.dims = {{inout.name}}_dims;
    {% for n in range(inout.dims) -%}
      {{inout.name}}_wrapped.shape[{{n}}] = {{inout.name}}_shape_{{n}};
    {%- endfor %}
    {%- endfor %}

    {% for output in validation.outputs -%}
    FloatArray {{output.name}}_wrapped;
    {{output.name}}_wrapped.fortran = f90_{{output.name}};
    {{output.name}}_wrapped.python = py_{{output.name}};
    {{output.name}}_wrapped.dims = {{output.name}}_dims;
    {% for n in range(output.dims) -%}
      {{output.name}}_wrapped.shape[{{n}}] = {{output.name}}_shape_{{n}};
    {% endfor %}
    {%- endfor %}

    v_{{prefix}}_py_{{validation.candidate}}(
      {% for inout in validation.inouts -%}
        {{inout.name}}_wrapped{{ ", " if not loop.last or validation.outputs|length > 0 else "" }}
      {%- endfor %}
      // outputs
      {% for output in validation.outputs -%}
        {{output.name}}_wrapped{{ ", " if not loop.last else "" }}
      {%- endfor %}
    );
  }

{% endfor %}
