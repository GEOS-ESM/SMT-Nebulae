import numpy as np
from mpi4py import MPI
from typing import TYPE_CHECKING

from data_conversion import FortranPythonConversion

if TYPE_CHECKING:
    import cffi


class {{hook_class}}:
    def __init__(self):
        # Default converter on Host memory. Use `cupy`
        # insteady of Numpy to get a Host<>Device converter
        self._f2py = FortranPythonConversion(target_numpy_module=np)

    {% for function in functions %}
    def {{function.name}}(
        self,
        # inputs
        {% for input in function.inputs -%}
        {{input.name}}:{{input.type}}{{ ", " if not loop.last or function.inouts|length > 0 or function.outputs|length > 0 else "" }}
        {%- endfor %}
        # inputs-outputs
        {% for inout in function.inouts -%}
        {{inout.name}}:{{inout.type}}{{ ", " if not loop.last or function.outputs|length > 0 else "" }}
        {%- endfor %}
        # outputs
        {% for output in function.outputs -%}
        {{output.name}}:{{output.type}}{{ ", " if not loop.last else "" }}
        {%- endfor %}
    ):
        python_state_data = {}
        # Note: Will need to add in dimensions for call to .fortran_to_python
        {% for data in function.inputs -%}
            {% if "cffi.FFI.CData" in data.type -%}
        python_state_data["{{data.name}}"] = self._f2py.fortran_to_python({{data.name}})
            {%- endif %}
        {% endfor %}
        {% for data in function.inouts -%}
            {% if "cffi.FFI.CData" in data.type -%}
        python_state_data["{{data.name}}"] = self._f2py.fortran_to_python({{data.name}})
            {%- endif %}
        {% endfor %}
        {% for data in function.outputs -%}
            {% if "cffi.FFI.CData" in data.type -%}
        python_state_data["{{data.name}}"] = self._f2py.fortran_to_python({{data.name}})
            {%- endif %}
        {% endfor %}
        print("My code for {{prefix}}_{{function.name}} goes here.")

        # Note: Will need to add in potential offset for call to .python_to_fortran
        {% for data in function.inouts -%}
            {% if "cffi.FFI.CData" in data.type -%}
        self._f2py.python_to_fortran(python_state_data["{{data.name}}"],{{data.name}})
            {%- endif %}
        {% endfor %}
        {% for data in function.outputs -%}
            {% if "cffi.FFI.CData" in data.type -%}
        self._f2py.python_to_fortran(python_state_data["{{data.name}}"],{{data.name}})
            {%- endif %}
        {% endfor %}
    {% endfor %}

    {% for validation in validations %}
    def v_{{validation.candidate}}(
        self,
        # inputs-outputs
        {% for inout in validation.inouts -%}
        {{inout.name}}:{{inout.type}}{{ ", " if not loop.last or validation.outputs|length > 0 else "" }}
        {%- endfor %}
        # outputs
        {% for output in validation.outputs -%}
        {{output.name}}:{{output.type}}{{ ", " if not loop.last else "" }}
        {%- endfor %}
    ):
        print("Validation of v_{{prefix}}_{{validation.candidate}}.")

        {% for inout in validation.inouts -%}
        {{inout.name}}_shape = list({{inout.name}}.shape[0 : {{inout.name}}.dims])
        f90_{{inout.name}} = self._f2py.fortran_to_python(
            {{inout.name}}.fortran, {{inout.name}}_shape
        )
        py_{{inout.name}} = self._f2py.fortran_to_python(
            {{inout.name}}.python, {{inout.name}}_shape
        )
        assert np.isclose(py_{{inout.name}}, f90_{{inout.name}}).all()
        {% endfor %}

        {% for output in validation.outputs -%}
        {{output.name}}_shape = list({{output.name}}.shape[0 : {{output.name}}.dims])
        f90_{{output.name}} = self._f2py.fortran_to_python(
            {{output.name}}.fortran, {{output.name}}_shape
        )
        py_{{output.name}} = self._f2py.fortran_to_python(
            {{output.name}}.python, {{output.name}}_shape
        )
        assert np.isclose(py_{{output.name}}, f90_{{output.name}}).all()
        {% endfor %}

    {% endfor %}

{{hook_obj}} = {{hook_class}}()
