import cffi
import os
from mpi4py import MPI

TMPFILEBASE = "{{prefix}}_interface"

ffi = cffi.FFI()

# MPI_Comm can be int or void*
if MPI._sizeof(MPI.Comm) == ffi.sizeof("int"):
    _mpi_comm_t = "int"
else:
    _mpi_comm_t = "void*"


source = f"""
from {TMPFILEBASE} import ffi
from datetime import datetime
from mpi4py import MPI
import traceback

from {{prefix}}_hook import {{hook_obj}}


{% for function in functions %}
@ffi.def_extern()
def {{prefix}}_py_{{function.name}}(
      # inputs
      {% for input in function.inputs -%}
      {% if "CData" in input.type -%}
      {{input.name}}:{{input.type}},
      {{input.name}}_dim_sizes:{{input.type}},
      {{input.name}}_rank:int{{ ", " if not loop.last or function.inouts|length > 0 else "" }}
      {%- else -%}
      {{input.name}}:{{input.type}}{{ ", " if not loop.last or function.inouts|length > 0 else "" }}
      {%- endif %}
      {% endfor %}
      # inputs-outputs
      {% for inout in function.inouts -%}
      {% if "CData" in inout.type -%}
      {{inout.name}}:{{inout.type}},
      {{inout.name}}_dim_sizes:{{inout.type}},
      {{inout.name}}_rank:int{{ ", " if not loop.last or function.outputs|length > 0 else "" }}
      {%- else -%}
      {{inout.name}}:{{inout.type}}{{ ", " if not loop.last or function.outputs|length > 0 else "" }}
      {%- endif %}
      {% endfor %}
      # outputs
      {% for output in function.outputs -%}
        {{output.name}}:{{output.type}}{{ ", " if not loop.last else "" }}
      {% endfor %}
    ) -> int:

    # Transform init code
    {% for code in function.init_code %}
    {{code}}
    {% endfor %}

    {{hook_obj}}.{{function.name}}(
        
      {% for input in function.inputs -%}
      {% if "CData" in input.type -%}
      {{input.name}}={{input.name}},
      {{input.name}}_dim_sizes={{input.name}}_dim_sizes,
      {{input.name}}_rank={{input.name}}_rank{{ ", " if not loop.last else "" }}
      {%- else -%}
      {{input.name}}={{input.name}}{{ ", " if not loop.last else "" }}
      {%- endif %}
      {% endfor %}
      {% for inout in function.inouts -%}
      {% if "CData" in inout.type -%}
      {{inout.name}}={{inout.name}},
      {{inout.name}}_dim_sizes={{inout.name}}_dim_sizes,
      {{inout.name}}_rank={{inout.name}}_rank{{ ", " if not loop.last else "" }}
      {%- else -%}
      {{inout.name}}={{inout.name}}{{ ", " if not loop.last else "" }}
      {%- endif %}
      {% endfor %}
      {% for output in function.outputs -%}
      {{output.name}}={{output.name}}{{ ", " if not loop.last else "" }}
      {% endfor %}
    )
{% endfor %}
{% for validation in validations %}
@ffi.def_extern()
def v_{{prefix}}_py_{{validation.candidate}}(
      # inputs-outputs
      {% for inout in validation.inouts -%}
        f90_{{inout.name}}:{{inout.type}}, py_{{inout.name}}:{{inout.type}}{{ ", " if not loop.last or validation.outputs|length > 0 else "" }}
      {%- endfor %}
      # outputs
      {% for output in validation.outputs -%}
        f90_{{output.name}}:{{output.type}}, py_{{output.name}}:{{output.type}},{{ ", " if not loop.last else "" }}
      {%- endfor %}
    ):
    {{hook_obj}}.v_{{validation.candidate}}(
      {%- for inout in validation.inouts -%}
        f90_{{inout.name}}=f90_{{inout.name}}, py_{{inout.name}}=py_{{inout.name}}{{ ", " if not loop.last or validation.outputs|length > 0 else "" }}
      {% endfor %}
      {%- for output in validation.outputs -%}
        f90_{{output.name}}=f90_{{output.name}}, py_{{output.name}}=py_{{output.name}}{{ ", " if not loop.last else "" }}
      {% endfor %}
    )
{% endfor %}

"""

header = f"""

{% for function in functions -%}
extern void {{prefix}}_{{function.name}}_py(
    {%- for arg in function.c_arguments -%}
      {%- if "*" in arg.type -%}
    {{arg.type}} {{arg.name}}
    int * {{arg.name}}_dim_sizes,
    int {{arg.name}}_rank{{ ", " if not loop.last else "" }}
      {%- else -%}
    {{arg.type}} {{arg.name}}{{ ", " if not loop.last else "" }}
      {%- endif -%}
    {%- endfor -%}
);
{% endfor %}
{% for validation in validations %}
extern void v_{{prefix}}_py_{{validation.candidate}}(
    {% for inout in validation.inouts_c -%}
      {{inout.type}} f90_{{inout.name}}, {{inout.type}} py_{{inout.name}}{{ ", " if not loop.last or validation.outputs|length > 0 else "" }}
    {%- endfor %}
    {% for output in validation.outputs_c -%}
      {{output.type}} f90_{{output.name}}, {{output.type}} py_{{output.name}}{{ ", " if not loop.last else "" }}
    {%- endfor %}
);
{% endfor %}
"""

with open(f"{TMPFILEBASE}.h", "w") as f:
    f.write(header)
    ffi.embedding_api(header)

    source_header = r'''#include "{}.h"'''.format(TMPFILEBASE)
    ffi.set_source(TMPFILEBASE, source_header)

    ffi.embedding_init_code(source)
    ffi.compile(target="lib" + TMPFILEBASE + ".so", verbose=True)

header_path = os.path.join(os.path.dirname(__file__), f"./{TMPFILEBASE}.h")
with open(header_path, "w") as f:
    f.write(header)
